TODAY:




[ ] Finish up example with some basic mouse tracking to test client-sent unreliable packets, clicking to add cube in front of position, expiration of cubes.


[ ] Add libpd and check out some server driven + client driven tones



[ ] Think about expiration, which still may be most reliably done
    as a clientside/serverside combo thing where the client auto-expires
    cubes after they've existed for x seconds, and same with server.



[ ] Get OpenAL basics working, then try streaming libpd to it.



























YESTERDAY:

[x] Use a small sliding window for unreliable messages,
    e.g. [0,1,2,3,4] are all being assembled, and when we see 5, kick out 0 to always keep 5 values in the buffer.
    Maybe when we kick it out, we should place it in the verifiedPackets queue, rather than exposing the collector?
    Then we can keep all receiver state in the TransceiverState type.
    (and we don't need the collector in an MVar)

[x] If we use a list for unreliable packets we can send them into the receiver's outgoing channel
    and add our own bundleID, splitting them up into multiple messages inside the receiver.

[x] Have outgoingPackets use Reliable | Unreliable sum type

[x] Add keepalive checks for kicking out clients while we're here.


[x] Integrated test of sending both reliable cube commands
    (create this cube, change color to this hue, etc.)
    (send each cube creation, then its color change)
    and unreliable cube commands (change this cube's pose)
      (it must be accounted for that these may
      appear out of order to reliable commands,
      and thus could appear
      before/after creation/destruction)
    A big grid of cubes would be great, like
    CreateCube 0
    ChangeHue  0 0.1
    CreateCube 1
    ChangeHue  1 0.2
    etc.
    ChangePose 0 (V3 0.1 0.2 0.3) (Quat 0.5 0.7 0.9 0.8)
    etc.

[ ] We should possibly have a way to bypass the collector on the server side and just broadcast
    certain unreliable messages straight out - specifically pose data from players - to avoid
    adding any latency to them.
    (consider how this will interact with physics updates, though;
    it may make things look unsynchronized which might be worse than latency)

How to do the numbering of unreliable packets so that we get a small buffer?

Just get the highest minus some number, and the lowest if that is not available?

Links:
Enet, UDT, RakNet, and the 'Reliable UDP' protocol
http://ithare.com/64-network-dos-and-donts-for-game-engines-part-iv-great-tcp-vs-udp-debate/#rabbitref-Reliable%20UDP

Splines for physics interp
http://phaazon.blogspot.fr/2015/06/smoothie-03-bezier-curves-and-new-user.html







DONE:
[x] Add cube coloring
[x] Support multiple clients
[x] Choose random color for each client, add to cube message
[x] Make sure cubes make it across correctly
[x] Add keepalive 
[x] Add "quit commands" (i.e. delete this object)
    Transmit these at the start? Or make these configurable.
[x] Add avatars that travel in a circle at different speeds

[x] Have the Transceiver hold a TVar of the last time it received a message
    Users of the Transceiver can check this against the current time to decide if
    they want to mark it as dead.

    The server will check each client (maybe in findClient, even?) periodically and
    kill the Transceiver if it is too old.
    The server can then use its own broadcast channel to broadcast a reliable message saying that the
    client is dead, which the app threads can pickup and use to clean up the client.

[x] Add tweak to the Transceiver that allows passing in an initial _connUnacked value
    and have the server start all new clients with a full historically-accumulated connUnacked.
    (be sure to handle the copying of the history with the cloning of the broadcastChan in a single transaction!)

